class Solution {
    static int temp = 0;
    public void solveSudoku(char[][] board) { 
        solve(board, 0, 0);
        temp = 0;
    }

    private static void solve(char board[][], int i, int j) {
        if(i == board.length) {
            temp = 1;
            return;
        }
        
        int ni = 0;
        int nj = 0;
        if(j == board.length-1) {
            ni = i + 1;
            nj = 0;
        }else {
            ni = i;
            nj = j + 1;
        }
        
        if(board[i][j] != '.') {
            solve(board, ni, nj);
        }else {
            for(char po = '1'; po <= '9'; po++) {
                if(isValid(board, i, j, po)) {
                    board[i][j] = po;
                    solve(board, ni, nj);
                    if(temp == 0) board[i][j] = '.';
                }
            }
        }
    }

    private static boolean isValid(char board[][], int x, int y, char val) {
        for(int j = 0; j < 9; j++) {
            if(board[x][j] == val) {
                return false;
            }
        }
        
        for(int i = 0; i < 9; i++) {
            if(board[i][y] == val) {
                return false;
            }
        }
        
        int row = x / 3 * 3;
        int col = y / 3 * 3;
        for(int i = 0; i < 3; i++) {
            for(int j = 0; j < 3; j++) {
                if(board[i+row][j+col] == val) {
                    return false;
                } 
            }
        }
        return true;
    }    
}
